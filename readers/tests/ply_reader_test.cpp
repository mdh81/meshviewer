#include "gtest/gtest.h"
#include "ReaderFactory.h"
#include "Mesh.h"
#include <memory>
using namespace std;
using namespace mv;
using namespace mv::common;
using namespace mv::readers;

namespace mv::readers {
    class PLYReaderFixture : public ::testing::Test {
    protected:
        struct HeaderInfo {
            bool isBinary;
            bool isLittleEndian;
            unsigned numVertices;
            unsigned numFaces;
        };
        static HeaderInfo testHeaderParsing(std::string const& header) {
            auto plyReader = PLYReader::createForTest();
            istringstream iss(header);
            plyReader.readHeader(iss);
            return {plyReader.isBinary, plyReader.isLittleEndian, plyReader.numVertices, plyReader.numFaces};
        }

        static void readNonExistentFile() {
            auto plyReader = PLYReader::createForTest();
            plyReader.getOutput();
        }

        static MeshPointer readData(std::string const& data) {
            auto plyReader = PLYReader::createForTest();
            istringstream stream(data);
            return plyReader.getOutput(stream);
        }

    };

    TEST_F(PLYReaderFixture, ParseHeader) {
        testing::internal::CaptureStdout();
        std::string header =
                "ply\n"
                "format ascii 1.0\n"
                "comment generated by ply_writer\n"
                "element vertex 437645\n"
                "property float x\n"
                "property float y\n"
                "property float z\n"
                "element face 871414\n"
                "property list uchar int vertex_indices\n"
                "end_header";
        auto parsedHeader = testHeaderParsing(header);
        ASSERT_FALSE(parsedHeader.isBinary);
        ASSERT_FALSE(parsedHeader.isLittleEndian);
        ASSERT_EQ(parsedHeader.numVertices, 437645);
        ASSERT_EQ(parsedHeader.numFaces, 871414);
        auto output = testing::internal::GetCapturedStdout();
        ASSERT_EQ(output, "Parsing PLY file with 437645 vertices and 871414 faces\n");
    }

    TEST_F(PLYReaderFixture, NonExistentFile) {
        ASSERT_THROW(
            try {
                readNonExistentFile();
            } catch(exception& ex) { throw; }
        ,runtime_error);
    }

    TEST_F(PLYReaderFixture, ASCIIInput) {
        testing::internal::CaptureStdout();
        std::string asciiFile =
                "ply\n"
                "format ascii 1.0\n"
                "element vertex 3\n"
                "property float x\n"
                "property float y\n"
                "property float z\n"
                "element face 1\n"
                "property list uchar int vertex_indices\n"
                "end_header\n"
                "0 0 0\n"
                "5 0 0\n"
                "5 5 0\n"
                "3 0 1 2";
        auto mesh = readData(asciiFile);
        auto output = testing::internal::GetCapturedStdout();
        unordered_set<string> outputSet;
        istringstream iss(output);
        string line;
        while(getline(iss, line)) {
            outputSet.insert(line);
        }
        ASSERT_TRUE(outputSet.find("Parsing PLY file with 3 vertices and 1 faces") != outputSet.end());
        ASSERT_TRUE(outputSet.find("Parsing PLY data in ASCII format") != outputSet.end());
        ASSERT_EQ(mesh->getNumberOfVertices(), 3);
        ASSERT_EQ(mesh->getNumberOfFaces(), 1);
        ASSERT_FLOAT_EQ(mesh->getVertices().at(0).dot({0,0,0}), 0.f);
        ASSERT_FLOAT_EQ(mesh->getVertices().at(1).dot({5,0,0}), 25.f);
        ASSERT_FLOAT_EQ(mesh->getVertices().at(2).dot({5,5,0}), 50.f);
        ASSERT_TRUE(mesh->getFace(0).at(0) == 0);
        ASSERT_TRUE(mesh->getFace(0).at(1) == 1);
        ASSERT_TRUE(mesh->getFace(0).at(2) == 2);

    }

}