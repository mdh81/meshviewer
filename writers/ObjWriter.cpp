#include "ObjWriter.h"
#include <fstream>
#include <sstream>
using namespace std;

namespace mv::writers {

void ObjWriter::writeLines(common::Lines const &lines) {
    ofstream ofs(m_fileName, ios::out);
    ostringstream objContents;
    objContents << "# Generated by MeshViewer " << endl;
    // Write vertices
    for (auto& line: lines) {
        for (auto& point : line) {
            objContents << "v " << point.x << ' ' << point.y << ' ' << point.z << " 1.0" << endl;
        }
    }
    // Write line elements
    size_t vertexIndex = 1, startIndex = 1;
    for (auto& line : lines) {
        objContents << "l ";
        for (size_t i = 1; i <= line.size(); ++i) {
            objContents << vertexIndex++ << ' ';
        }
        objContents << startIndex;
        startIndex = vertexIndex;
        objContents << endl;
    }

    ofs.write(objContents.str().c_str(), objContents.str().size() * sizeof(char));
    ofs.close();
}

void ObjWriter::writeTriangles(common::Points const &points, common::Triangles const& faces) {
    ofstream ofs(m_fileName, ios::out);
    ostringstream objContents;
    objContents << "# Generated by MeshViewer " << endl;
    // Write vertices
    for (auto& point: points) {
        objContents << "v " << point.x << ' ' << point.y << ' ' << point.z << " 1.0" << endl;
    }
    // Write Triangles
    for (auto& face: faces) {
        objContents << "f " << face[0] + 1 << ' ' << face[1] + 1 << ' ' << face[2] + 1<< endl;
    }
    ofs.write(objContents.str().c_str(), objContents.str().size() * sizeof(char));
    ofs.close();
}

void ObjWriter::writeAsTriangles(common::Points const &points, common::VertexIndices const &faces, common::byte const vertexStride) {
    ofstream ofs(m_fileName, ios::out);
    ostringstream objContents;
    objContents << "# Generated by MeshViewer " << endl;
    // Write vertices
    auto numVertices = points.size() / vertexStride;
    for (size_t i = 0; i < numVertices; ++i) {
        auto& point = points[vertexStride*i];
        objContents << "v " << point.x << ' ' << point.y << ' ' << point.z << " 1.0" << endl;
    }
    //Write as triangles
    auto numTris = faces.size() / 3;
    for (size_t i = 0; i < numTris; ++i) {
        objContents << "f " << faces[3*i] + 1 << ' ' << faces[3*i+1] + 1 << ' ' << faces[3*i+2] + 1 << endl;
    }
    ofs.write(objContents.str().c_str(), objContents.str().size() * sizeof(char));
    ofs.close();
}


void ObjWriter::writeTriangles(float const* vertices, size_t numVertices, unsigned const* tris, size_t numTris) {
    ofstream ofs(m_fileName, ios::out);
    ostringstream objContents;
    objContents << "# Generated by MeshViewer " << endl;
    // Write vertices
    for (size_t i = 0, offset = 0; i < numVertices; ++i,offset+=3) {
        objContents << "v " << vertices[offset] << ' ' << vertices[offset+1] << ' ' << vertices[offset+2] << " 1.0" << endl;
    }
    //Write as triangles
    for (size_t i = 0, offset = 0; i < numTris; ++i, offset+=3) {
        objContents << "f " << tris[offset] + 1 << ' ' << tris[offset+1] + 1 << ' ' << tris[offset+2] + 1 << endl;
    }
    ofs.write(objContents.str().c_str(), objContents.str().size() * sizeof(char));
    ofs.close();
}

}
